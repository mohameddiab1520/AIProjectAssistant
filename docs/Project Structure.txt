AIProjectAssistant/
│
├── AIProjectAssistant.sln
│
└── AIProjectAssistant/
    │
    ├── AIProjectAssistant.csproj
    ├── source.extension.vsixmanifest      // Visual Studio extension manifest file
    ├── AIProjectAssistantPackage.cs       // Main entry point for the extension
    ├── Packages.vsct                      // Commands, menus, and toolbar definitions
    │
    ├── Core/ (folder)                     // Core logic of the tool
    │   ├── Orchestration/ (folder)        // Multi-agent orchestration system
    │   │   ├── Orchestrator.cs            // The brain: analyzes input and coordinates agents
    │   │   ├── IAgent.cs                  // Common interface for all agents
    │   │   ├── AgentBase.cs               // Base class with shared agent logic
    │   │   └── Agents/ (folder)           // Specialized agent implementations
    │   │       ├── PlannerAgent.cs        // Planning agent
    │   │       ├── CodingAgent.cs         // Code generation agent
    │   │       ├── DebuggerAgent.cs       // Debugging agent
    │   │       ├── TestingAgent.cs        // Unit testing agent
    │   │       ├── RefactoringAgent.cs    // Refactoring and code improvement agent
    │   │       ├── UiAgent.cs             // UI design agent (XAML, Razor, etc.)
    │   │       ├── DatabaseAgent.cs       // Database management agent
    │   │       └── SecurityAgent.cs       // Security and vulnerability scanner agent
    │   │
    │   ├── Execution/ (folder)            // Executes external and secure operations
    │   │   ├── ProcessManager.cs          // Manages shell commands (dotnet, npm, git)
    │   │   └── SandboxManager.cs          // Handles simulation mode (temporary environments)
    │   │
    │   ├── State/ (folder)                // Project state management
    │   │   ├── ProjectSession.cs          // Represents the current project session state
    │   │   └── SessionManager.cs          // Handles saving/loading project session (JSON)
    │   │
    │   ├── Memory/ (folder)               // Long-term memory system
    │   │   ├── IVectorStore.cs            // Interface for vector database
    │   │   ├── LiteDBVectorStore.cs       // Implementation using LiteDB (lightweight and embedded)
    │   │   └── MemoryManager.cs           // Manages storing and retrieving memory entries
    │   │
    │   └── IO/ (folder)                   // Input/output operations
    │       └── FileSystemManager.cs       // File and directory operations handler
    │
    ├── Services/ (folder)                 // External integrations and supporting services
    │   ├── OpenRouterService.cs           // OpenRouter API integration with Streaming support
    │   ├── SettingsService.cs             // User settings management
    │   ├── ModelAssignmentService.cs      // Assigns proper AI models to each agent/task
    │   ├── TemplateService.cs             // Manages built-in and custom project templates
    │   └── CostTrackingService.cs         // Live token/cost usage tracking
    │
    ├── Models/ (folder)                   // Data objects used throughout the system
    │   ├── AgentTask.cs                   // Represents a single agent-assigned task
    │   ├── ChatMessage.cs                 // Represents one message in the chat history
    │   ├── ExecutionResult.cs             // Represents an operation result (success, failure, output)
    │   ├── MemoryRecord.cs                // Represents a memory item stored in vector DB
    │   ├── ModelInfo.cs                   // Information about available AI models
    │   ├── ProjectPlan.cs                 // Represents the overall project execution plan
    │   └── ProjectStage.cs                // Represents a stage in the execution lifecycle
    │
    ├── UI/ (folder)                       // All WPF-based user interface components
    │   ├── Controls/ (folder)
    │   │   ├── OrchestratorControl.xaml     // Main panel UI (chat, progress bar, etc.)
    │   │   └── VisualPlanEditor.xaml       // Visual project plan editor (TreeView)
    │   │
    │   ├── Windows/ (folder)
    │   │   ├── OrchestratorWindow.cs       // VS ToolWindow container
    │   │   └── ModelAssignmentWindow.xaml  // Settings window for model-to-agent mapping
    │   │
    │   ├── ViewModels/ (folder)           // MVVM pattern support
    │   │   ├── MainViewModel.cs
    │   │   ├── AgentViewModel.cs
    │   │   └── ChatMessageViewModel.cs
    │   │
    │   └── Converters/ (folder)
    │       └── BoolToVisibilityConverter.cs // Converts boolean to Visibility (WPF binding)
    │
    ├── Commands/ (folder)                 // Visual Studio commands registration
    │   ├── CommandRegistrar.cs
    │   └── PackageIds.cs
    │
    └── Resources/ (folder)                // Icons, images, and localizable strings
        ├── Icon.png
        └── Strings.resx
